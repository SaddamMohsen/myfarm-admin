---------------------Create New User-----------------
---- args email ,password,user_meta type jsonb{conatins schema and farm id},schema_user_name,schema_name-----
-------------------------------------------
------ How to use
-- select
--   create_user (
--     'sad@sadco.com'::text,
--     'password'::text,
--     '{"schema":"al_watania","farm_id":2}'::jsonb,
--     'al_watania_users'::text,'al_watania'::text
--   )

CREATE OR REPLACE FUNCTION create_user(
    email text,
    password text,
    user_meta jsonb, schema_user_name text,schema_name text
) RETURNS uuid AS $$
  declare
  user_id uuid;
  encrypted_pw text;
BEGIN
  user_id := gen_random_uuid();
  encrypted_pw := crypt(password, gen_salt('bf'));
  
  INSERT INTO auth.users
    (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, recovery_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, created_at, updated_at, confirmation_token, email_change, email_change_token_new, recovery_token)
  VALUES
    ('00000000-0000-0000-0000-000000000000', user_id, 'authenticated', schema_user_name, email, encrypted_pw, now(), now(), now(), '{"provider":"email","providers":["email"]}',user_meta, now(), now(), '', '', '', '');
  
  INSERT INTO auth.identities (provider_id,id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at)
  VALUES
    (user_id,gen_random_uuid(), user_id, format('{"sub":"%s","email":"%s"}', user_id::text, email)::jsonb, 'email', now(), now(), now());
  --EXECUTE 'GRANT '||schema_user_name||' TO ' || user_id;
  --EXECUTE 'GRANT USAGE ON SCHEMA ' || schema_name || ' TO ' || user_id;
  RETURN user_id;
END;
$$ LANGUAGE plpgsql; 



--function to retrieve users in specifeid schema who
-- has no role admin and has no farm_id
--HOW TO USE
--select retieve_users_in_schema('al_watania','al_watania_users');
create or replace function retieve_users_in_schema(schema_name text,user_role text) RETURNS TABLE (
  id uuid,
  role varchar(255),
  email varchar(255),
  raw_app_meta_data JSONB,
  raw_user_meta_data JSONB
)  
language plpgsql as $body$
-- declare
-- users_row RECORD;
begin
-- for users_row in 
return query
select
  tbl.id,
    tbl.role,
    tbl.email,
    tbl.raw_app_meta_data,
    tbl.raw_user_meta_data
from
  auth.users as tbl
where
  tbl.raw_user_meta_data ->> 'schema' = schema_name and tbl.role=user_role  
  and tbl.raw_user_meta_data ->'role' IS NULL and tbl.raw_user_meta_data ->'farm_id' is null;
  -- LOOP
  --    RETURN NEXT users_row; -- return current row of SELECT
  --   END LOOP;
  --   RETURN;
End;
$body$;


--Function to insert Supervisor for farm invoked by insert trigger
create or replace function insert_to_supervisors_table_after_add_farm() returns trigger 
 language plpgsql security definer as $func$
declare
email varchar:=(select email from auth.users where id=new.farm_supervisor);

begin
insert into public.supervisors(name,details,u_id) values(email,'مشرف مزرعة '||new.farm_name,new.farm_supervisor);
update auth.users set raw_user_meta_data=raw_user_meta_data||jsonb_build_object('farm_id', new.id) where id=new.farm_supervisor;
return new;
end;
$func$;


--Function to delete all related farm from database 
--invoked by delete trigger of farm
CREATE OR REPLACE FUNCTION delete_related_farm_data()
RETURNS TRIGGER AS $$
declare
schema text:=(select raw_user_meta_data->'schema' from auth.users where id=old.farm_supervisor);
BEGIN
  DELETE FROM production USING farms f
  WHERE production.farm_id = OLD.id;

  DELETE FROM ambers USING farms f
  WHERE ambers.farm_id = OLD.id;

  DELETE FROM items_movement USING farms f
  WHERE items_movement.farm_id = OLD.id;

  DELETE FROM inventory USING farms f
  WHERE inventory.farm_id = OLD.id;
   
   update auth.users set raw_user_meta_data=json_build_object('schema',schema) where id=old.farm_supervisor;

  RETURN null;
END;
$$ LANGUAGE plpgsql security definer;
